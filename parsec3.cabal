name:           parsec3
version:        1.0.0.3
cabal-version: >= 1.2.3
license:        BSD3
license-file:   LICENSE
author:         Daan Leijen <daan@microsoft.com>, Paolo Martini <paolo@nemail.it>
maintainer:     Christian Maeder <Christian.Maeder@dfki.de>
homepage:       http://www.cs.uu.nl/~daan/parsec.html
category:       Parsing
synopsis:       Monadic parser combinators
build-type: Simple
description:
        Parsec is designed from scratch as an industrial-strength parser
        library.  It is simple, safe, well documented (on the package
        homepage), has extensive libraries and good error messages,
        and is also fast.  It is defined as a monad transformer that can be
        stacked on arbitrary monads, and it is also parametric in the
        input stream type.
        .
        This package comes without the compatibility layer for parsec2.
        .
        Note, that the module names overlap with those of newer parsec
        versions, therefore I do not recommend to unconditionally use parsec3
        as dependency in cabal files of packages for hackage.  But you may
        want to develop your code using this subset of parsec3 modules and
        finally change the dependency from parsec3 to parsec-3.1.1 in order to
        avoid module ambiguities for users just installing your package.  Your
        own module ambiguities are best avoided by hiding packages.
        .
        This version has only a changed description compared to parsec3-1.0.0.2
        that does not re-exports parts of the Applicative module to stay compatible with
        parsec-3.1.1
library
    exposed-modules:
        Text.Parsec,
        Text.Parsec.String,
        Text.Parsec.ByteString,
        Text.Parsec.ByteString.Lazy,
        Text.Parsec.Pos,
        Text.Parsec.Error,
        Text.Parsec.Prim,
        Text.Parsec.Char,
        Text.Parsec.Combinator,
        Text.Parsec.Token,
        Text.Parsec.Expr,
        Text.Parsec.Language,
        Text.Parsec.Perm
    build-depends: base >= 4 && < 5, mtl, bytestring
    extensions: DeriveDataTypeable, PolymorphicComponents, FlexibleInstances,
        MultiParamTypeClasses, FlexibleContexts
